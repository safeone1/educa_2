// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  directUrl = env("DIRECT_URL")
  url       = env("DATABASE_URL")
}


model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}




model Classroom {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  Exam Exam[]

  Table Table[]
}


enum ExamStatus {
  Scheduled
  Ongoing
  Completed
  Cancelled
}

model Exam {
  id String @id @default(cuid())
  name String? // ✨ NOUVEAU - Nom de l'examen (temporairement optionnel)
  subject String? // Temporairement optionnel pour migration
  professor String? // ✨ NOUVEAU - Professeur responsable
  supervisors String[] // ✨ NOUVEAU - Liste des surveillants
  date DateTime
  duration Int? // Temporairement optionnel pour migration
  createdAt DateTime @default(now())
  classRooms Classroom[]
  status ExamStatus @default(Scheduled)
  ExamCandidates ExamCandidate[]
  @@unique([id, date])
  ExamSupervisor ExamSupervisor[]
}


model ExamCandidate  {
  id String @id @default(cuid())
  orderNum Int // N° Ordre from CSV
  examNum String // N° Exam from CSV (can contain letters/prefixes)
  examId String
  exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  tableId String?
  table Table? @relation(fields: [tableId], references: [id])
  isPresent Boolean @default(false)
  checkoutAt DateTime?
  @@unique([examId, id]) 
}

model ExamSupervisor {
  id String @id @default(cuid())
  examId String
  exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
  supervisorName String
  createdAt DateTime @default(now())
}

model Table {
  id String @id @default(cuid())
  num Int
  createdAt DateTime @default(now())
  classRoomId String
  classRoom Classroom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)
  ExamCandidates ExamCandidate[]
  @@unique([num, classRoomId  ])

}